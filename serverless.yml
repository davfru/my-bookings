service: my-bookings

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  # title: 'my-bookings'
  deploymentBucket:
    name: my-bookings-deployment-bucket
    serverSideEncryption: AES256
  logs:
    httpApi: true # cloudwatch access logs (more info https://www.serverless.com/framework/docs/providers/aws/events/http-api)

custom:
  deploymentBucket:
    versioning: true
    accelerate: true
    blockPublicAccess: true

openApiIntegration:
  inputFile: swagger.yml
  package: true
  # cors: true # it gives error during deploy if uncommented
  # autoMock: true
  mapping:
    - stage: dev
      path: openapi-integration/dev

functions:
  bookingApi:
    handler: src/api/bookingsHandler.handler
    name: ${self:provider.stage}BookingApi
    description: rest apis to booking rooms
    memorySize: ${file(./src/configs/config.${self:provider.region}.${self:provider.stage}.json):MEMORY_SIZE}
    timeout: ${file(./src/configs/config.${self:provider.region}.${self:provider.stage}.json):TIMEOUT}
    environment:
      BOOKINGS_TABLE_NAME: ${self:resources.Resources.BookingsTable.Properties.TableName}
    iamRoleStatementsName: ${self:provider.stage}-${self:provider.region}-BookingApiRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:getItem
          - dynamodb:putItem
          - dynamodb:deleteItem
        Resource: !GetAtt BookingsTable.Arn

resources:
  Resources:

    #############
    # dynamo db #
    #############

    BookingsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.stage}-bookings
        AttributeDefinitions:
          - AttributeName: BookingId # base 64 format
            AttributeType: S
        KeySchema:
          - AttributeName: BookingId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    ###############
    # api gateway #
    ###############

    # Create API key

    BookingApiKey:
      Type: 'AWS::ApiGateway::ApiKey'
      Properties:
        Name: x-api-key
        Description: booking api key
        Enabled: true

    # Create the API based on the OpenAPI specification

    ApiGatewayRestApi:
      Type: 'AWS::ApiGateway::RestApi'
      Properties:
        Body:
          ${file(./openapi-integration/api.yml)}

    # Deploy the API

    ApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      DependsOn: BookingApiKey
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${self:provider.stage}

    # Create API usage plan 

    BookingApiUsagePlan:
      Type: 'AWS::ApiGateway::UsagePlan'
      DependsOn: 
        - ApiGatewayRestApi
        - BookingApiKey
      Properties:
        UsagePlanName: booking-api-usage-plan
        Description: Booking api usage plans
        ApiStages:
          - ApiId: !Ref ApiGatewayRestApi
            Stage: ${self:provider.stage}
        Quota:
          Limit: 100
          Period: MONTH
        Throttle:
          BurstLimit: 200
          RateLimit: 100

    # attach api key to usage plan

    BookingApiUsagePlanKey:
      Type: AWS::ApiGateway::UsagePlanKey
      Properties:
        KeyId: !Ref BookingApiKey
        KeyType: API_KEY
        UsagePlanId: !Ref BookingApiUsagePlan

    # Grant permission for the API to call the lambda
    # note that lambda named "bookingApi" becomes "BookingApiLambdaFunction" in Cloudformation due to a normalization
    # more info: https://www.serverless.com/framework/docs/providers/aws/guide/resources#aws-cloudformation-resource-reference

    InvokeBookingApiPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - BookingApiLambdaFunction
            - Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com

package:
  excludeDevDependencies: true
  individually: true
  patterns:
    - '!**/__test/**/*'
    - '!src/tests/**'
    - '!src/config/**'
    - '!config.*'
    - '!resources/**'
    - '!script/**'
    - '!docs/**'
    - '!events/**'
    - '!README.md'
    - '!swagger.yaml'
    - '!package-lock.json'
    - '!*.postman_collection.json'

plugins:
  - serverless-iam-roles-per-function # mandatory to use iamRoleStatementsName under functions
  - serverless-deployment-bucket # allows to choose a custom s3 deployment bucket name
  - serverless-openapi-integration-helper # https://www.serverless.com/plugins/serverless-openapi-integration-helper#overview